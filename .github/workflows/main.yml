name: Terraform CI/CD | AWS Serverless Deploy

on:
  push:
    branches:
      - main

jobs:
  terraform_apply:
    name: Terraform Altyapı Dağıtımı (Apply)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: List repo files
        run: ls -R

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.0.0"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Rebuild Lambda ZIP Package
        shell: bash
        working-directory: ./  # <- Repo köküne göre
        run: |
          if [ -f "index.js" ]; then
            zip -r lambda_function.zip index.js
            echo "lambda_function.zip created"
          else
            echo "index.js not found, skipping zip"
          fi

      - name: Terraform Init
        working-directory: ./   # <- Repo kökü
        run: terraform init

      - name: Terraform Plan
        working-directory: ./   # <- Repo kökü
        run: terraform plan -no-color

      - name: Terraform Apply
        working-directory: ./   # <- Repo kökü
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform apply -auto-approve

      - name: Show API Endpoint Output
        shell: bash
        working-directory: ./   # <- Repo kökü
        run: |
          echo "serverless_api_url=$(terraform output -raw serverless_api_url)" >> $GITHUB_ENV

      - name: Print API Endpoint
        shell: bash
        run: |
          if [ -z "$serverless_api_url" ]; then
            echo "API Endpoint not found."
          else
            echo "✅ Serverless API Endpoint: $serverless_api_url"
          fi
